// ---------- generator & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------- enums ----------
enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

// ---------- models ----------
model User {
  id            String        @id @db.Char(36) 
  email         String        @unique
  fullName      String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  tasksCreated  Task[]        @relation("TasksCreated")
  tasksAssigned Task[]        @relation("TasksAssigned")
  messages      TaskMessage[]

  passwordHash  String       @db.VarChar(255)

  requests      TaskRequest[]

  @@index([email])
}

model Task {
  id             String     @id @default(uuid()) @db.Char(36)
  title          String
  description    String?
  status         TaskStatus @default(PENDING)
  
  assignedUser   User?      @relation("TasksAssigned", fields: [assignedUserId], references: [id], onDelete: SetNull)
  assignedUserId String?    @db.Char(36)

  
  createdBy   User   @relation("TasksCreated", fields: [createdById], references: [id], onDelete: Restrict)
  createdById String @db.Char(36)

  deadline  DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  TaskMessage[]

  requests  TaskRequest[]

  @@index([assignedUserId])
  @@index([createdById])
  @@index([status])
  @@index([deadline])
  @@index([createdAt])
}

model TaskMessage {
  id     String @id @default(uuid()) @db.Char(36)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String @db.Char(36)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.Char(36)

  body      String
  createdAt DateTime @default(now())

  @@index([taskId, createdAt])
}

model TaskRequest {
  id           String        @id @default(uuid()) @db.Char(36)
  task         Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String        @db.Char(36)
  requester    User          @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId  String        @db.Char(36)
  status       RequestStatus @default(PENDING)
  createdAt    DateTime      @default(now())

  @@index([taskId, status, createdAt])
  @@index([requesterId, status, createdAt])

  @@unique([taskId, requesterId, status])
}

